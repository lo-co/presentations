<html>
  <head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css/reveal.css">
    <link rel="stylesheet" href="css/theme/serif.css" id ="theme">
  </head>
  <body>
    <div class = "reveal">
      <div class="slides"><section>
          <section>
            <img src="img/programmer_states.jpeg" height="700" alt="states...">
          </section>
          <section><h1>You're Doing it Wrong
              <h1>
                <h2>A Case Study in Large Application Development</h2>
              </h1>
          </section>
          <section data-transition="convex">or,
            <h2>How to Aggravate your Customers and Guarantee Future Rework</h2>
            <aside class="notes"><p>While some of this is tounge in cheek, this is a real look at developing an application with an eye to ease of maintenance and scaling.  I have talked about this in previous meetings, but this is an overall big picture - hopefully this will be the last...</p></aside>
          </section>
        </section>
        <section>
          <section>
            <h2>About the project:</h2>
            <ul>
              <li>For a customer a long long ways away...</li>
              <li>Large instrument consisting of a lot of devices/instruments running asynchronously.</li>
            </ul>
            <aside class="notes">
              <p>Customer is so far away that we are seperated by an ocean and 7 time zones (I made that up...)</p>
            </aside>
          </section>
          <section>
            <img src="img/system_overview.png" alt="">
            <aside class="notes">
              <p>This was the initial thinking for the system - it was in the design documents that I provided.  For the most part, still holds. </p>
              <ul>
                <li> Got away from SVs, but could be used  </li>
                <li>Uses <em>both</em> FPGA and RT - so you know it's going to be awesome</li>
                <li>"General Server" is my mental junk drawer... the focus was on the measurements generated by the other two servers.  General Server measurements are used to support the instrument measurements.</li>
                <li>Uses a web service (but I am gettign ahead of myself); Not sure what the meaning of the RESTful tag is - RESTful is an architecture. </li>
              </ul>
            </aside>
          </section>
          <section>
            <h2>This is going to be hard</h2>
            <h2 class="fragment" data-fragment-index="2">Question: How could I make this even more difficult??</h2>
          </section>
          <section>
            <h2>Make it...</h2>
            <img class = "fragment" src="img/flexible.png" alt="">
          </section>
        </section>
        <section>
          <section> 
            <div style="float:left;width:50%"><h2>Step 1: The Actor Framework</h2><p>It's all about the message...</p>
            </div>
            <div style="float:right;width:50%"><img src="img/actors_whisper.jpg" height="400" alt="actors whisper"></div>

            <aside class="notes">
              <ul>
                <li>How many here are using/have used the AF?  Do you all like it (generally)?  Would you recommend it?</li>
                <li>Sam just started using the AF - what does he think?</li>
                <li>Those of you all not using AF - why not?  Intimidated? No time?  Overkill?</li>
              </ul>

            </aside>
          </section>
          <section>
            <h2>The AF is:</h2>
            <ul>
              <li>Robust</li>
              <li>Adaptive</li>
              <li><em>Very</em> modular</li>
            </ul>
            <h2 class="fragment">it isn't</h2>
            <ul class="fragment">
              <li>not complicated</li>
            </ul>
            <aside class="notes">
              <ul>
                <li>Robust - once you have it running, it is really reliable </li>
                <li>Scalable - easy to add components</li>
                <li><em>Very</em> modular</li>
              </ul>
              <p>That's a double negative - get it?? It's complicated - like that relationship you just don't want to talk about.  Problems:</p>
              <ul>
                <li>There is a ton of boiler plate</li>
                <li>The asynchronous nature makes this difficult to debug</li>
                <li>The reentrant nature presents a particular challenge on RT systems</li>
              </ul>
            </aside>
          </section>
          <section>
            <h2>Let's talk about structure!</h2>
            <img src="img/actor_outlay.png" class="cld" style = "border-width:0px;" alt="">
            <aside class="notes">
            </aside>
          </section>
          <section>
            <img src="img/Launch Activity.jpg" height="600"  style="border-width:0px;" alt="">
            <aside class="notes">OK - that's pretty cool.  Each piece is in it's own little sandbox.  Nothing here is technically synchronous although:
              <ul>
                <li> you do probably want to apply power before starting</li>
                <li>and the file writer doesn't know apriori who will write, so it needs to make sure everyone registers before it knows when to start.  Better ideas?</li>
              </ul>
              <p>This diagram is deceptively simple as we are often starting multiple instances of all of these basic actors.  Yay for reusable code!!</p>
              <p>But, let's get back to our high level view of the AF...</p>
            </aside>
          </section>
          <section>
            <img src="img/actor_outlay.png" class="cld" style = "border-width:0px;" height="600" alt="af outlay">
            <aside class="notes">
              <p>Two issues with our accepted understanding of standard usage of the AF.  First is that you got to get your messages to the right place.</p>
            </aside>

          </section>
          <section>
            <div style="width:50%;float:left">
              <h2>That's a hell of a lot of boiler plate!</h2></div> 
            <div style="width:50%;float:right">
              <img src="img/controller_msgs.png" style="height:700; border-width:0px;" class="fragment"  alt="">
              </aside>
            </div>
            <aside class="notes">
              Here, let's talk about the actual boiler plate:
              <ul>
                <li>Messages flow up and down the stack with flow managed by a central controller.</li>
                <li>This means that we will have multiple messages achieving the same purpose.</li>
                <li>Communicating with stateful subjects <em>within actors</em> will require further mechanisms to maintain the contract.</li>
                <li>And, how do you push data around and maintain the current state of the system as a whole?</li>
              </ul>
              <p>Not only do you have messages that flow up and down, but you also have to get your messages to the controller proper. Imagine, 
              <ol>
                <li>Client sends message to server to change frequency of laser</li>
                <li>Web service receives message and passes it on to controller in main app</li>
                <li>Controller passes it on to appropriate instrument</li>
                <li>Instrument then passes it on to portion running external to the main core that maintains state</li>
              </ol>
              That is potentially three seperate classes touching four separate entities!  
              </p>

            </aside>
          </section>
          <section>

          </section>
          <section>
            <h2>This train has got to stop!</h2>
            <aside class="notes">
              <p>In a system this large, there are a lot of moving pieces (inertia).  We have to make sure that everybody understands that we stop when asked to...</p>
              <ul>
                <li>Normal stop (changed in later versions?), can result in dangling actors.</li>
                <li>Common enough problem that MGI came out with the "Monitored Actor" with a cute little display to tell you who is still running</li>
                <li>Normal stop can decapitate your system, leaving these dangling processes with no communication channel</li>
                <li>Really, what needs to be done is to intercept the normal stop (or use another message) and request all nested actors shutdown and don't shut down the controller until all have.</li>
                <li>ENTER THE SUPERACTOR!!!
                  <ul>
                    <li>Originally developed to handle just this case, has become the parent of ALL my actors</li>
                  </ul>

                </li>
              </ul>

            </aside>
          </section>
        </section>
        <section>
          <section>
            <h2>
              Step 2: Mixin web Services
            </h2>
            <img src="img/ws.jpeg" alt="">
            <aside class="notes">
              The idea here is to be able to communicate with clients on different platforms.
              No need for the LabVIEW RTE here - the actual code resides on the server (instrument)
              itself
            </aside>
          </section>
          <section>
            <h2>But why?</h2>
            <ul>
              <li class="fragment">Platform agnostic</li>
              <li class="fragment">No LabVIEW RTE</li>
            </ul>
            <aside class="notes">
              <p>A web service allows us to be even more independent in terms of our view than LV.  We can run
              on any machine with a browser - windows, linux, mac, phones, etc.  All code is hosted on the 
              server itself so all the client needs to do is point to the server.</p>
              <p>Going to say something offensive in the next slide...</p>
            </aside>
          </section>
          <section>
            <h2>Windows 10 is Terrible!</h2>
            <img class="fragment" src="img/windows_10_fpga.png" class="cld" alt="">
            <aside class="notes">
              <ul>
                <li>How many of you are using Windows?  Windows 10?</li>
                <li>Do you like it?</li>
              </ul>
              <p>Personally, were it not for games or LV, I would not use it.</p>
              <p>BAM! Since NI is not using the latest Vivado kit, the FPGA module is officially unsupported..</p>
            </aside>
          </section>
          <section>
            <h2>Great! Let's use web services - what could go wrong??</h2>
          </section>
          <section>
            <h2>Passing Data</h2>
            <ul>
              <li>It will be text</li>
              <li>It will be raw (if you are working with an RT system)</li>
              <li>And it might look something like <a href="https://github.com/msr-consulting/exscalabar/blob/master/data/data.json">this 700 kB mess</a>.</li>
            </ul>
            <aside class="notes">
              <p>In LV, you don't really have to think too hard about passing data. Natively, it will handle everything for you.  Hands up:
              <ul>
                <li>How do you typically pass data in an application?  What about between asynchronous processes?</li>
                <li>How <em>would</em> you pass data to an external application?  Likely not running LV?</li>
              </ul>
              In a web service, you <em>will</em> be passing data as raw text.  You will <em>not</em> be flattening it.
              </p>
            </aside>
          </section>
          <section>
            <h2>Serialization - what's that?</h2>
            <ul>
              <li>Serialization - not there. Nope.  <a href="https://tinyurl.com/hf5f4fw">AQ Character Lineator</a></li>
            </ul>


          </section>
        </section>
      </div>
    </div>
    <div class="cld" style="display:block; position:absolute;z-index:20;font-size:20px;bottom:16px;text-align:center;margin-right:-50%;left:50%; transform:translate(-50%,0%);">
      Matt Richardson, MSR Consulting LLC, December 2016 
    </div>


    <style>
.share-reveal a {display: inline-block; height:34px;line-height:32px;padding:0 10px; color:#fff;font-family:Helvetica, san-serif; text-decoration: none; font-weight:bold;font-size:12px;vertical-align: top; text-transform:uppercase; box-sizing:border-box;}
.cld img{border-width:0px;
  font-size:20px;
}
    </style>
    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.js"></script>
    <script >
Reveal.initialize({
  progress:true,
  width:960,
  height:700,
  margin:0.1,
  minScale:0.2,
  maxScale:1,
 dependencies:[


// {src: '../reveal/lib/js/classList.js', condition: function(){return !document.body.classList;}},
 {src: 'plugin/markdown/marked.js', condition: function(){return !!document.querySelector('[data-markdown]');}},
{src: 'plugin/markdown/markdown.js', condition: function(){return !!document.querySelector('[data-markdown]');}},
  {src: 'plugin/math/math.js', async: true},
 {src: 'plugin/notes/notes.js', async:true}


]
  });
    </script>
  </body>  
</html>
